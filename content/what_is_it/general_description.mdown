Date: 01/01/2014 
Title: General Overview 
Summary: A small Ruby CMS application in a Sinatra environment without a database. 

*-----*-----*-----*

#What is this site?

This is the personal website of Lauren Wszolek built in a Ruby application called [Starman](https://github.com/bambery/starman). Starman does not use a database, and instead generates a blog-like site based on markdown files in a specified content directory. 

The app is 95% code complete. The current content and layout were written in a day to get a low-level partial demo up and will hopefully be judged accordingly. 

A more detailed description of how the app functions can be found in [How Does it Work?](some kind of link)

##Supporting Technologies
* [_Sinatra_](http://www.sinatrarb.com): Starman is written using Sinatra. The concept of a personal site with only a few pages seemed too small for a Rails application, the only Ruby web framework I'd ever used. This was an excellent opportunity to shed all of the magic of Rails and build a webapp piece by piece with this new Sinatra thing all of the kids were talking about.
* _No Database_: Site content is written in Markdown files under the content/ directory. I wasn't keen on reading and writing to a database when I wanted to edit content and I also wanted to be able to write the content entirely offline with controlled releases. Inspired by gems such as [add link] Nesta, I'd initially intended to write a static site generator, but then I decided: Memcached.
* [_Markdown_](https://daringfireball.net/projects/markdown/): The content of the site is contained in individual markdown files processed with [redcarpet](https://github.com/vmg/redcarpet). This allows for writing content in a somewhat more natural style without worrying about html markup. 
* [_Memcached_](http://memcached.org): Memcached is an in-memory key-value store that's blazing fast for saving and retrieving the results of more expensive operations. Surviving without a database means Memcached is indispensible, since reading in and processing system files is both resource and time expensive. Memcached is accessed using the [Dalli](https://github.com/mperham/dalli) gem and Starman::CachingHelpers.  Starman never expires cache entries, relying on fingerprinted assets to ensure that only fresh content is served to the user. 
* [_Sprockets_](https://github.com/sstephenson/sprockets): Sprockets generates the manifest and handles all asset processing and tracking. Css and javascript is precompiled and fingerprinted along with the markdown files containing content. Configuration of Sprockets is handled within the [Cloud Crooner](https://github.com/bambery/cloud_crooner) gem.
* [_Heroku_](https://www.heroku.com): Finding a provider to support the up-to-date Ruby & Rack features I required eventually led me to this popular hosting service. It comes with github integration and easy Rack configuration, but running it on the free tier comes with a speed cost on startup. Heroku also updates the mtime of all files after every push, even if unchanged, requiring me to host fingerprinted files, which use mtime as one factor in staleness, elsewhere. 
* [_Amazon S3_](http://aws.amazon.com/s3/): Besides the necessity of hosting files separate from Heroku that would not be touched on each release, distributing assets across multiple servers decreases page load times and reduces requests to the core app - not essential for Starman, but a common technique in larger apps. Integration with Amazon S3 is handled by the [Cloud Crooner](https://github.com/bambery/cloud_crooner) gem. 
